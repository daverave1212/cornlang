
All Changes and Documentation
	
	Overhauls:
Automatically adds ";" when necessary (or rather when not unnecessary)
int, bool, char, float and string are primitives
ALL non-primitive objects are automatically pointers (Object o - Object* o)
	This happens automatically in all situations
	
	Classes
All clases have a getType() by default
	
	Syntax
Array of <string> myArray = new Array of <string>()

	Keywords:
import - parses, then copy pastes all the generated code onto the source code from which it was called
for	- automatically adds "("
	- detects and transforms
		for int X = Y:Z
			into
		for(int X = Y; X<=Z; X++){
if - automatically adds "("
while - automatically adds "("
public	- public:
private - private:
static	- instantiates the object immediately after the class ends ("end")
end		- }
program	start	- int main(int argc, char** argv){
program end		- return 0;}

	Standard Library:
String - 



	Operators:
;	- }
.	- is replaced by -> or ::, intelligently
[ and ]		- automatically replaced by the elem(array, index) function
			- array[i] is replaced by elem(array, i)
:	- takes the place of '{'
	- optional for if/while/for




_____________________________________________________________________________________
[DONE] automatically put a ; at the end of the line, no matter what

[DONE] import copy pastes code


[DONE] class		puts "{" at the end of the line
			checks for last word on the line and adds it to the tree as a CLASSNAME
[DONE] primitives have a PRIMITIVE to them
[DONE] if			becomes "if(" and puts "){" at the end of the line

[DONE] .			if the previous word is was a class, becomes ::
			else becomes ->

[DONE] public		becomes public:
[DONE] private		becomes private:
[DONE] [FIXED!] static	ATTRIBUTES	records all line until it finds a word with no data in the tree
[DONE] static METHODS

for(int i = ceva1 : ceva2)
for( INT i = ceva1; i <= ceva2; i++	)
	

[SKIPPED] if previous word was "template", append "class" to it

[SKIPPED]	function definitions:
		int myFunction()
	
	
[NEEDS TESTING] Objects and pointers:
	Add a "*" after an object definition when:
		If not function
			At first occurence of an object, mark the line (NOT ARRAY OR MATRIX THOUGH)
				At first occurence of "=" or "does", previous previous word appends "*"
		If function
			At occurence of an object on the same level
				If next character is <
					Find the end > on the same level and append *
				Else
					Append *
				
			
			








